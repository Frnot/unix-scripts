#!/usr/bin/env python3

version = "2.6.2b"

# TODO: investigate lvm snapshot -kn (non active)

# borg init user@host:/dir1/dir2/borg_repo -e none

import argparse
import atexit
import datetime
from os import path
from shutil import which
import subprocess
import sys

usage = f"usage text"

vg = "plex-vg"
lv = "root"
snapname = "backup_snap"
reponame = "plex@fileserver:/vault/media/plex_server/borg_repo"

date_time = datetime.datetime.now().strftime("%Y%m%d__%H_%M_%S")

logfile = "/tmp/plex-backup.log"
log = None
quiet = not sys.stdout.isatty()


def main():
    global log
    log = Log(logfile, quiet)

    # check that necessary applications are available
    if which("lvs") is None:
        log.msg("Error: lvs: command not found.")
        exit(2)
    if which("borg") is None:
        log.msg("Error: borg: command not found")
        log.msg("borg can be installed with 'apt install borgbackup'")
        exit(2)

    # parse launch parameters
    parser = argparse.ArgumentParser(
        description=usage, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("source_directory", help="The directory to backup")
    parser.add_argument("destination_repo", help="The borg repo to send the backup to")

    parser.add_argument(
        "-k",
        "--keep",
        dest="keep_num",
        action="store",
        help="Keep N most recent backups",
    )

    args = parser.parse_args()
    source_dir = path.normpath(args.source_directory)
    dest_repo = args.destination_repo

    if not path.isdir(source_dir):
        log.msg(f"directory '{source_dir}' does not exist")
        exit(2)
    # TODO: check for borg destination repo

    log.msg(f"source directory: '{source_dir}'")
    log.msg(f"destination repo: '{dest_repo}'")

    # check that volume group and logical volume exists
    # TODO: automatically get the vg/lv that the dest directory resides on
    (result, rc) = run("lvs")
    if [r for r in result.splitlines() if lv in r] is None:
        log.msg(f"LV '{lv}' does not exist. try running command 'lvs'")
        # test for vg, print 'use vgs' if not exist

    # quiesce plex media server and take a snapshot
    log.msg("stopping plex media server")
    run("systemctl stop plexmediaserver.service")
    log.msg(f"creating snapshot of '{vg}/{lv}' as '{snapname}'")
    run(f"lvcreate -s -L5G -n {snapname} {vg}/{lv}")
    log.msg("starting plex media server")
    run("systemctl start plexmediaserver.service")
    # TODO: restart plex if interrupt while creating snapshot
    atexit.register(delete_snap, vg, snapname)

    # mount snapshot
    log.msg(f"mounting snapshot '/dev/{vg}/{snapname}' at '/tmp/{snapname}'")
    run(f"mkdir /tmp/{snapname}")
    run(f"mount /dev/{vg}/{snapname} /tmp/{snapname}")

    # use borg to backup to destination
    # atexit.register(delete_incomplete_archive)
    # TODO: check what borg does when you interrupt a backup
    source = path.normpath(f"/tmp/{snapname}" + source_dir)
    destination = f"{dest_repo}::plexarchive{date_time}"
    log.msg(f" using borg to backup '{source}' to '{destination}'")
    archive(source, destination)

    atexit.register(prune_archives, dest_repo)
    # atexit.unregister(delete_incomplete_archive)


def run(command):
    cmdarr = command.split()
    result = subprocess.run(cmdarr, text=True, capture_output=True)

    return (result.stdout, result.returncode)


def archive(source, destination):
    command = f"borg create --stats --progress --exclude Cache --compression zstd"
    cmdarr = command.split()
    cmdarr.append(destination)
    cmdarr.append(source)
    log.msg(f"running command: '{' '.join(cmdarr)}'")

    p = subprocess.Popen(cmdarr)  # , stdout=sys.stdout
    p.wait()

    return p.returncode


def delete_snap(vg, snapname):
    log.msg(f"deleting snapshot '{vg}/{snapname}'")
    run(f"umount /tmp/{snapname}")
    run(f"lvremove {vg}/{snapname} -y")
    # TODO: check for errors when unmounting


def prune_archives(reponame):
    # borg prune --keep-last N <reponame>
    log.msg(f"pruning old archives")
    run(f"borg prune --keep-last 3 {reponame}")


def delete_incomplete_archive():
    pass


class Log:
    def __init__(self, logfilepath, quiet):
        self.logfilepath = logfilepath
        self.quiet = quiet
        if quiet:
            self.logfile = open(logfilepath, "w")
            atexit.register(self.logfile.close)
            self.logfile.write(
                f"{date_time} - starting backup of plex media server files"
            )

    def msg(self, message):
        if self.quiet:
            timenow = datetime.datetime.now().strftime("%H:%M:%S")
            self.logfile.write(f"{timenow} - {message}\n")
        else:
            print(message)


main()
