#!/usr/bin/env python3

version = "v1.2b"

import argparse
import atexit
import datetime
import filecmp
import os
import subprocess
import sys


# key: (cert_dir, post_cmd)
platform_parameters = {
    "bookstack": (
        "/etc/ssl/bookstack",
        "systemctl restart apache2",
    ),
    "plex": (
        "/etc/ssl/plex",
        "openssl pkcs12 -export -out /etc/ssl/plex/cert.p12 -in /etc/ssl/plex/cert.pem -inkey /etc/ssl/plex/key.pem -passout pass: && chown plex /etc/ssl/plex/cert.p12 && systemctl restart plexmediaserver.service",
    ),
    "pbs": (
        "/etc/ssl/certs/*.lab.frnot.com",
        "cp /etc/ssl/certs/*.lab.frnot.com/cert.pem /etc/proxmox-backup/proxy.pem && cp /etc/ssl/certs/*.lab.frnot.com/key.pem /etc/proxmox-backup/proxy.key && systemctl restart proxmox-backup-proxy.service",
    ),
    "proxmox": (
        "/etc/ssl/certs/*.lab.frnot.com",
        "cp /etc/ssl/certs/*.lab.frnot.com/cert.pem /etc/pve/local/pveproxy-ssl.pem && cp /etc/ssl/certs/*.lab.frnot.com/key.pem /etc/pve/local/pveproxy-ssl.key && systemctl restart pveproxy.service",
    ),
    "qbittorrent": (
        "/etc/ssl/certs/qbittorrent",
        "chown qbittorrent -R /etc/ssl/certs/qbittorrent && systemctl restart qbittorrent",
    ),
}

verbose = False
force = False
logfile = "/tmp/renewcerts.log"
temporary_cert_dir = "/tmp/certs"
log = None
date_time = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")


def main():
    global log
    log = Log(logfile, sys.stdout.isatty())

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=f"supported platforms: {', '.join(platform_parameters.keys())}",
    )
    parser.add_argument(
        "platform",
        help="loads application specific cert import settings for this platform",
    )
    parser.add_argument(
        "cert_server",
        help="certificate server ssh target. ex: '<user>@acme-dns.example.com'",
    )

    parser.add_argument(
        "-f",
        "--force",
        dest="force",
        action="store_true",
        help="force renew certificate",
    )
    parser.add_argument(
        "--version", action="version", version=f"cert renew script {version}"
    )

    args = parser.parse_args()

    cert_dir, cmd = platform_parameters[args.platform]
    cert_server = args.cert_server
    force = args.force
    log.msg(f"platform: '{args.platform}'")

    pull_certs(cert_server)
    atexit.register(cleanup)

    if force:
        log.msg("'--force' specified. renewing certs")
        renew_certs(cert_dir, cmd)
    else:
        if new_certs_available(cert_dir):
            log.msg("New certs found. renewing certs")
            renew_certs(cert_dir, cmd)
        else:
            log.msg("No new certificates found. exiting")
            pass


def new_certs_available(cert_dir):
    oldcert = os.path.join(cert_dir, "cert.pem")
    newcert = os.path.join(temporary_cert_dir, "cert.pem")

    if not os.path.exists(oldcert):
        log.msg(f"'{oldcert}' does not exist")
        return True

    log.msg(f"comparing '{newcert}' to '{oldcert}'")
    return not filecmp.cmp(oldcert, newcert)


def renew_certs(cert_dir, cmd):
    try:
        execute(f"cp {temporary_cert_dir}/* {cert_dir}")
        log.msg(f"executing cmd: '{cmd}'")
        execute(cmd)
    except Exception as e:
        log.msg(f"error renewing certs\n{e}")


def pull_certs(cert_server):
    log.msg(f"downloading certificates to '{temporary_cert_dir}'")
    try:
        if not os.path.exists(temporary_cert_dir):
            os.makedirs(temporary_cert_dir)

        log.msg(f"executing command: 'sftp {cert_server}:* {temporary_cert_dir}'")
        execute(f"sftp {cert_server}:* {temporary_cert_dir}")
    except Exception as e:
        log.msg(f"Error downloading certificate files:\n{e}")
        exit()


def cleanup():
    log.msg("cleaning up temporary cert files")
    execute("rm -r /tmp/certs")


def execute(command):
    # shell=True needed for Bash globbing
    result = subprocess.run(command, shell=True)

    if result.stdout:
        log.msg(result.stdout)

    if result.returncode != 0:
        raise RuntimeError(result.stderr)


class Log:
    def __init__(self, logfilepath, fg):
        self.logfilepath = logfilepath
        self.fg = fg
        with open(self.logfilepath, "w") as f:
            timenow = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"{timenow} - Renewing certs {version}\n")

    def msg(self, message):
        if self.fg:
            print(message)
        timenow = datetime.datetime.now().strftime("%H:%M:%S")
        with open(self.logfilepath, "a") as f:
            f.write(f"{timenow} - {message}\n")


main()
