#!/bin/bash
# v0.4

# TODO: check for zfs and pv before running
# TODO: handle interruptions / cleanup
# TODO: fall back from bookmarks to snapshot (get last snapshot form destination and search for it on source)
# TODO: handle errors if refresh fails (wrong dest dataset for incremental send) (echo $? returns not 0)
## ex error: cannot receive incremental stream: most recent snapshot of edrive2/crypt does not match incremental source
# TODO: add ssh support

BOOKMARK_SUFFIX="zsync_incremental"
DATETIME=$(date +"%Y_%m_%d__%H_%M_%S")

HELP="Uses ZFS send/recieve to sync a ZFS filesystem between source and destination"
USAGE="usage: zsync <source dataset> <destination dataset>"

log(){
	printf "$1\n"
}

init() {
    zfs snapshot $snap_name
    log "Sending '$snap_name' to $destination"
    zfs send $snap_name | pv | zfs recv -vu $destination

    # if the send command completely sucessfully
    if [ $? -eq 0 ]; then
        # convert the source snapshot to a bookmark for future incremental sends
        zfs bookmark $snap_name $bookmark_name
    fi

    zfs destroy $snap_name
}


refresh() {
    zfs snapshot $snap_name
    log "Sending incremental snapshot '$snap_name' to $destination"
    zfs send -i $bookmark_name $snap_name | pv | zfs recv -vFu $destination

    # if the send command completely sucessfully
    if [ $? -eq 0 ]; then
        # convert the source snapshot to a bookmark for future incremental sends (overwrite previous bookmark)
        zfs destroy $bookmark_name
        zfs bookmark $snap_name $bookmark_name

        # only save most recent snapshot on destination
        zfs list -t snapshot $destination | tail -n +2 | awk '{print $1}' | head -n -1 | xargs -I snap zfs destroy snap
    else
        log "Error: ZFS send failed."
    fi

    # delete the snapshot that was used for the source
    zfs destroy $snap_name
}




if [ "$1" == "-h" ]; then
    log "$HELP"
    log "$USAGE"
    exit
fi

if (( $# < 2 )); then
    log "$USAGE"
    exit
fi

source=$1
destination=$2
dest_pool="${destination%/*}"

# check that source dataset exists
if (( $(zfs list | grep $source | wc -l ) == 0 )); then
    log "Error: source dataset \"$source\" does not exist. exiting"
    exit
fi

# check that destination pool exists
if (( $(zpool list | grep $dest_pool | wc -l ) == 0 )); then
    log "Error: destination pool \"$dest_pool\" does not exist. exiting"
    exit
fi


snap_name="$source@backup_$DATETIME"
bookmark_name="$source#$dest_pool-$BOOKMARK_SUFFIX"

# if last bookmark and destination dataset exist
if (( $(zfs list -t bookmark $source | grep $bookmark_name | wc -l) > 0 )) && (( $(zfs list -r $dest_pool -o name | grep $destination | wc -l) > 0 )); then
    refresh
else
    init
fi
