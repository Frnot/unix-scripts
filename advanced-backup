#!/usr/bin/env python3

version = "1.0.0b"

# TODO: take lv snapshot for backup, delete it after
# TODO: cleanup incomplete archives if tar - xz does not finish
# TODO: compare hash before wasting time with commpression
# TODO - DATA: save the hash to a persisent log file so i can see if it ever doesn't change (unlikely)
# TODO: look into differential compressed archives

import argparse
import datetime
import hashlib
import os
from os import path
import subprocess

usage = f"usage text"

date_time = datetime.datetime.now().strftime("%Y%m%d__%H_%M_%S")


def main():
    parser = argparse.ArgumentParser(
        description=usage, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("source_directory")
    parser.add_argument("destination_directory")

    parser.add_argument(
        "-k",
        "--keep",
        dest="keep_num",
        action="store",
        help="Keep N most recent backups",
    )

    args = parser.parse_args()

    source_dir = path.normpath(args.source_directory)
    dest_dir = args.destination_directory

    name = path.basename(source_dir)
    dest_filenamep = f"{name}-{date_time}.tar.xz.part"
    dest_filename = f"{name}-{date_time}.tar.xz"
    destinationp = path.join(dest_dir, f"{name}-{date_time}.tar.xz.part")
    destination = path.join(dest_dir, f"{name}-{date_time}.tar.xz")

    # Compress source files
    log(f"Archiving '{source_dir}'")
    archive(source_dir, destinationp)
    os.rename(destinationp, destination)
    log(f"Saved archive to '{destination}'")


def archive(src_dir, dest):
    cmd1 = "tar -cf -".split()
    print(cmd1)
    cmd1.append(src_dir)
    print(cmd1)

    cmd2 = "xz -v3 --threads=0 --memlimit=50% -c -".split()
    p1 = subprocess.Popen(cmd1, stdout=subprocess.PIPE)
    with open(dest, "w") as out_file:
        p2 = subprocess.Popen(cmd2, stdin=p1.stdout, stdout=out_file)


def log(message):
    print(message)


main()
