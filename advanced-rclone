#!/bin/bash
# v0.13

DATETIME=$(date +"%Y_%m_%d__%H_%M_%S")

SOURCE_DIR=$1
DEST_DIR=$(basename $SOURCE_DIR)
REMOTE=$2

mkdir -p /tmp/rclone_"$REMOTE"
LOG=/tmp/rclone_"$REMOTE"/"$DEST_DIR".log 
LOG_ROTATE=/tmp/rclone_"$REMOTE"/"$DEST_DIR"_old.log


log() {
        if [ "$1" == "-e" ]
        then
                printf "Error: ${*:2}" >(tee >(cat 1>&2))
        else
                printf "${*:2}"
        fi
}

# Cleanup will be called on exit
cleanup(){
    mv $LOG $LOG_ROTATE
}


trap "cleanup" Exit

if [ -z "$(ls -A $SOURCE_DIR)" ] # if directory is empty
then
    log -e "\"$SOURCE_DIR\" is empty or does not exist.\nSkipping sync."
    exit 1
fi


log "Backing up $SOURCE_DIR to $REMOTE:$DEST_DIR"
command /usr/bin/rclone sync --transfers 4 -v --delete-after --track-renames --track-renames-strategy modtime,leaf --drive-stop-on-upload-limit --stats 10s --max-backlog=100000 $SOURCE_DIR $REMOTE:$DEST_DIR &>> $LOG
EXITCODE1=$?

# If rclone exits with code 7 (gdrive limit reached),
if [ $EXITCODE1 == 7 ]; then
    ERROR="Google Drive daily upload limit reached."
    log -e $ERROR
    cat $ERROR > $LOG
    exit 1
# Else if rclone exits with any other error
elif [ $EXITCODE1 != 0 ]; then
    log -e "rclone failed to sync $SOURCE_DIR with exit code: $EXITCODE1"
    cat $LOG >&2
    exit 1
fi
